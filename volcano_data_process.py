import pandas as pd
import math
import click
import matplotlib.pyplot as plt
import matplotlib.colors as colors
import seaborn as sns
import numpy as np
@click.command()
@click.option('-i','--input', help = "Address of input dataframe file generated by DESeq2, either absolute address or relative address")
@click.option('-o','--output', default = "./outputdata.txt", help = "Address of output dataframe file, either absolute address or relative address. Default: \"./outputdata.txt\"")
@click.option('-p','--pthreshold', default = 1.3, help = "Threshold of -log10padjvalue. Values larger than it will be regarded as significant value and will be coloured. default: 1.3")
@click.option('-f','--foldchangethreshold', default = 1, help = "Threshold of log2FoldChange. Significant value larger than absolute value of it will be regarded as up-regulated or down-regulated gene. default: 1")
@click.option('-g','--outputgraph', default = "./volcano.svg", help = "Address and name of output volcano graph, either absolute address or raletive address. default: \"./volcano.svg\"")
@click.option('-d','--dpi', default = 400, help="Dots per inch. default: 400")

def main(input, output, pthreshold, foldchangethreshold, outputgraph, dpi):
	"""
	Data process
	"""
	data = pd.read_table(f"{input}",sep="\t",index_col = 0, header= 0 )
	vol_data = data.iloc[:,[0,2,6]].dropna(axis=0)
	vol_data.rename(columns={'Unnamed: 0':'gene_id'},inplace=True)
	vol_data['-log10padjvalue'] = -np.log10(vol_data["padj"])
	vol_data.to_csv(f"{output}",sep="\t")
	
	"""
	Plot
	"""
	plotdata = pd.concat([vol_data.iloc[:,1],vol_data.iloc[:,3]],axis=1,ignore_index=True)
	plotdata.columns = ['log2FoldChange','-log10padjvalue']
	plotdata['label'] = 'normal'
	plotdata.loc[(plotdata["log2FoldChange"]> foldchangethreshold)&(plotdata["-log10padjvalue"] > pthreshold),'label'] = 'up'
	plotdata.loc[(plotdata["log2FoldChange"] < -foldchangethreshold)&(plotdata["-log10padjvalue"] > pthreshold),'label'] = 'down'
	ax = sns.scatterplot(x=plotdata['log2FoldChange'],y=plotdata['-log10padjvalue'],hue='label',hue_order=('down','normal','up'),palette=('#377EB8','grey','#E41A1C'),data=plotdata)
	ax.set_xlabel(plotdata.columns[0],fontweight='bold')
	ax.set_ylabel(plotdata.columns[1],fontweight='bold')
	scatter_fig = ax.get_figure()
	scatter_fig.savefig(f"{outputgraph}",dpi = dpi)

if __name__ == "__main__":
	main()
